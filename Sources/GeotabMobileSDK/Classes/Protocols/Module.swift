import Foundation
import Mustache

/**
 Geotab Module base class
 */
open class Module: NSObject {
    static let geotabModules = "geotabModules"
    static let geotabNativeCallbacks = "___geotab_native_callbacks"
    static let callbackPrefix = "geotab_native_api_"
    static var templateRepo: TemplateRepository!
    /**
     Module's javascript name
     */
    public let name: String
    /**
     Functions that reside in this module's in Javascript namespace.
     */
    public var functions: [ModuleFunction] = []
    
    /**
     - Parameters:
        - name: String. This module's Javascript namespace.
     */
    public init(name: String) {
        self.name = name
    }
    
    /**
     Returns the module function with the given name or `nil` if not found.
     */
    public func findFunction(name: String) -> ModuleFunction? {
        return functions.first {moduleFunction in
            moduleFunction.name == name
        }
    }
    
    /**
     Javascript snippets to be injected into the WKWebview instance for communicating with this Module and its contained ModuleFunctions.  Add any scripts generated by a super method.
     */
    open func scripts() -> String {
        let functionTemplate = try! Module.templateRepo.template(named: "Module.Script")
        let scriptData: [String: Any] = ["geotabModules": Module.geotabModules, "moduleName": name, "geotabNativeCallbacks": Module.geotabNativeCallbacks, "callbackPrefix": Module.callbackPrefix]
        var script = (try? functionTemplate.render(scriptData)) ?? ""
        for fun in functions {
            script += fun.scripts()
        }
        
        return script
    }
}

/// :nodoc:
extension Module {
    public static func == (lhs: Module, rhs: Module) -> Bool {
        return lhs.name == rhs.name
    }
}
