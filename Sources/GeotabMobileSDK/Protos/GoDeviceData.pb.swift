// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: GoDeviceData.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GoDeviceData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: UInt32 = 0

  /// 1e-7 precision
  var latitude: Int32 = 0

  /// 1e-7 precision
  var longitude: Int32 = 0

  var roadSpeed: Int32 = 0

  /// 0.25 precision
  var rpm: Int32 = 0

  /// 0.1 precision unit km
  var odometer: UInt32 = 0

  var statusFlag: UInt32 = 0

  /// 0.1 precision unit km
  var tripOdometer: UInt32 = 0

  /// 0.1 precision unit h
  var totalEngineHours: UInt32 = 0

  /// unit sec
  var tripDuration: UInt32 = 0

  var goDeviceID: UInt32 = 0

  var driverID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GoDeviceData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GoDeviceData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "latitude"),
    3: .same(proto: "longitude"),
    4: .same(proto: "roadSpeed"),
    5: .same(proto: "rpm"),
    6: .same(proto: "odometer"),
    7: .same(proto: "statusFlag"),
    8: .same(proto: "tripOdometer"),
    9: .same(proto: "totalEngineHours"),
    10: .same(proto: "tripDuration"),
    11: .same(proto: "goDeviceId"),
    12: .same(proto: "driverId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.timestamp) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.latitude) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.longitude) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.roadSpeed) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.rpm) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.odometer) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.statusFlag) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.tripOdometer) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.totalEngineHours) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.tripDuration) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.goDeviceID) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self.driverID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularUInt32Field(value: self.timestamp, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularInt32Field(value: self.latitude, fieldNumber: 2)
    }
    if self.longitude != 0 {
      try visitor.visitSingularInt32Field(value: self.longitude, fieldNumber: 3)
    }
    if self.roadSpeed != 0 {
      try visitor.visitSingularInt32Field(value: self.roadSpeed, fieldNumber: 4)
    }
    if self.rpm != 0 {
      try visitor.visitSingularInt32Field(value: self.rpm, fieldNumber: 5)
    }
    if self.odometer != 0 {
      try visitor.visitSingularUInt32Field(value: self.odometer, fieldNumber: 6)
    }
    if self.statusFlag != 0 {
      try visitor.visitSingularUInt32Field(value: self.statusFlag, fieldNumber: 7)
    }
    if self.tripOdometer != 0 {
      try visitor.visitSingularUInt32Field(value: self.tripOdometer, fieldNumber: 8)
    }
    if self.totalEngineHours != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalEngineHours, fieldNumber: 9)
    }
    if self.tripDuration != 0 {
      try visitor.visitSingularUInt32Field(value: self.tripDuration, fieldNumber: 10)
    }
    if self.goDeviceID != 0 {
      try visitor.visitSingularUInt32Field(value: self.goDeviceID, fieldNumber: 11)
    }
    if self.driverID != 0 {
      try visitor.visitSingularUInt32Field(value: self.driverID, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GoDeviceData, rhs: GoDeviceData) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.roadSpeed != rhs.roadSpeed {return false}
    if lhs.rpm != rhs.rpm {return false}
    if lhs.odometer != rhs.odometer {return false}
    if lhs.statusFlag != rhs.statusFlag {return false}
    if lhs.tripOdometer != rhs.tripOdometer {return false}
    if lhs.totalEngineHours != rhs.totalEngineHours {return false}
    if lhs.tripDuration != rhs.tripDuration {return false}
    if lhs.goDeviceID != rhs.goDeviceID {return false}
    if lhs.driverID != rhs.driverID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
